
// ==================== H√ÄM H·ªñ TR·ª¢ ====================
// Hi·ªÉn th·ªã l·ªói ho·∫∑c th√¥ng b√°o
function showMessage(elementId, message, type = "error") {
    const box = document.getElementById(elementId);
    if (box) {
        box.textContent = message;
        box.className = type === "success" ? "form-message success" : "form-message error";
    }
}

// ƒê·ªìng b·ªô gi·ªè h√†ng t·ª´ localStorage l√™n server
async function syncCartToServer() {
    try {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        for (const item of cart) {
            await fetch(`${window.API_BASE}/api/cart`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({
                    id: item.id,
                    name: item.name,
                    originalPrice: item.originalPrice,
                    salePrice: item.salePrice,
                    discountPercent: item.discountPercent,
                    image: item.image,
                    quantity: item.quantity || 1
                })
            });
        }
        // Sau khi ƒë·ªìng b·ªô, l·∫•y gi·ªè h√†ng t·ª´ server ƒë·ªÉ c·∫≠p nh·∫≠t localStorage
        const res = await fetch(`${window.API_BASE}/api/cart`, {
            method: 'GET',
            credentials: 'include'
        });
        const data = await res.json();
        if (data.success) {
            localStorage.setItem('cart', JSON.stringify(data.cart));
            if (typeof updateCartCount === 'function') {
                updateCartCount();
            }
        }
    } catch (err) {
        console.error('L·ªói ƒë·ªìng b·ªô gi·ªè h√†ng:', err);
    }
}

// Helper: x·ª≠ l√Ω h√†nh ƒë·ªông c·∫ßn l√†m *sau* khi ƒë√£ login (c√πng-tab ho·∫∑c OAuth redirect)
async function processAfterLoginNoReload() {
    try {
        // 1) Update local user info from server
        if (typeof checkLoginStatus === 'function') {
            await checkLoginStatus();
        } else if (typeof fetchUserInfo === 'function') {
            await fetchUserInfo();
        }

        // 2) ƒê·ªìng b·ªô gi·ªè h√†ng t·ª´ local -> server (n·∫øu c·∫ßn)
        try { await syncCartToServer(); } catch (e) { /* ignore */ }

        // 3) C·∫≠p nh·∫≠t hi·ªÉn th·ªã header
        if (typeof updateUserDisplay === 'function') updateUserDisplay();
        if (typeof updateCartCount === 'function') updateCartCount();
        if (typeof updateOrderCount === 'function') updateOrderCount();

        // 4) Th√¥ng b√°o cho c√°c script trong c√πng tab (v√≠ d·ª• resetproduct.js s·∫Ω process pendingAction)
        try { window.dispatchEvent(new Event('user:login')); } catch (err) { console.warn('dispatch user:login failed', err); }

        // 5) N·∫øu c√≥ pendingAction l∆∞u trong localStorage th√¨ g·ªçi h√†m x·ª≠ l√Ω (n·∫øu ƒë·ªãnh nghƒ©a)
        if (typeof processPendingAction === 'function') {
            try { await processPendingAction(); } catch (err) { console.warn('processPendingAction error', err); }
        }
    } catch (err) {
        console.error('processAfterLoginNoReload error:', err);
    }
}

// ==================== KI·ªÇM TRA TR·∫†NG TH√ÅI ƒêƒÇNG NH·∫¨P ====================
async function checkLoginStatus() {
    try {
        const res = await fetch(`${window.API_BASE}/api/me`, {
            method: "GET",
            credentials: "include"
        });
        const data = await res.json();

        if (data.loggedIn && data.user) {
            // L∆∞u th√¥ng tin c·∫ßn thi·∫øt v√†o localStorage
            localStorage.setItem("userId", data.user.id || "");
            localStorage.setItem("firstName", (data.user.firstName || "").trim());
            localStorage.setItem("lastName", (data.user.lastName || "").trim());
            localStorage.setItem("email", data.user.email || "");
            localStorage.setItem("userName", (data.user.lastName || "").trim());
            if (data.user.avatar_url) {
                localStorage.setItem("avatarUrl", data.user.avatar_url);
            } else {
                localStorage.removeItem("avatarUrl");
            }

            // üîì M·ªü kho√° gi·ªè h√†ng khi ƒë√£ ƒëƒÉng nh·∫≠p
            localStorage.removeItem("cartLocked");

            // ƒê·ªìng b·ªô gi·ªè h√†ng khi ƒëƒÉng nh·∫≠p (ch√∫ √Ω: function c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi ·ªü n∆°i kh√°c)
            // syncCartToServer s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi processAfterLoginNoReload khi c·∫ßn
        } else {
            // X√≥a th√¥ng tin user n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
            localStorage.removeItem("userId");
            localStorage.removeItem("firstName");
            localStorage.removeItem("lastName");
            localStorage.removeItem("email");
            localStorage.removeItem("userName");
            localStorage.removeItem("avatarUrl");
        }

        if (typeof updateUserDisplay === "function") {
            updateUserDisplay();
        }
    } catch (err) {
        console.error("L·ªói ki·ªÉm tra ƒëƒÉng nh·∫≠p:", err);
    }
}

// ==================== ƒêƒÇNG K√ù ====================
const registerForm = document.getElementById("registerForm");
if (registerForm) {
    registerForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const email = document.getElementById("register-email").value.trim();
        const firstName = document.getElementById("register-firstname").value.trim();
        const lastName  = document.getElementById("register-lastname").value.trim();
        const password  = document.getElementById("register-password").value.trim();

        showMessage("register-error", "");

        try {
            const res = await fetch(`${window.API_BASE}/api/register`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({ email, firstName, lastName, password })
            });
            const data = await res.json();
            if (data.success) {
                showMessage("register-error", "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.", "success");
                // Ki·ªÉm tra v√† th√™m s·∫£n ph·∫©m t·∫°m sau ƒëƒÉng k√Ω
                const pendingItem = JSON.parse(localStorage.getItem('pendingCartItem'));
                if (pendingItem) {
                    addToCart(pendingItem.id, pendingItem.name, pendingItem.originalPrice, pendingItem.salePrice, pendingItem.discountPercent, pendingItem.image);
                    localStorage.removeItem('pendingCartItem');
                    showMessage("register-error", `ƒê√£ th√™m "${pendingItem.name}" v√†o gi·ªè h√†ng sau khi ƒëƒÉng k√Ω!`, "success");
                }
                // C·∫≠p nh·∫≠t UI header
                if (typeof updateUserDisplay === "function") {
                    updateUserDisplay();
                }
                setTimeout(() => {
                    if (typeof CyberModal !== "undefined" && CyberModal.showLogin) CyberModal.showLogin();
                    showMessage("register-error", "");
                }, 1500);
            } else {
                showMessage("register-error", data.error || "‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i!");
            }
        } catch (err) {
            console.error(err);
            showMessage("register-error", "‚ùå L·ªói k·∫øt n·ªëi server!");
        }
    });
}

// ==================== ƒêƒÇNG NH·∫¨P ====================
const loginForm = document.getElementById("loginForm");
if (loginForm) {
    loginForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const email = document.getElementById("login-email").value.trim();
        const password = document.getElementById("login-password").value.trim();

        showMessage("login-error", "");

        try {
            const res = await fetch(`${window.API_BASE}/api/login`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({ email, password })
            });
            const data = await res.json();

            if (data.success && data.user) {
                // L∆∞u v√†o localStorage ngay khi login
                localStorage.setItem("userId", data.user.id || "");
                localStorage.setItem("firstName", (data.user.firstName || "").trim());
                localStorage.setItem("lastName", (data.user.lastName || "").trim());
                localStorage.setItem("email", data.user.email || "");
                localStorage.setItem("userName", (data.user.lastName || "").trim());
                if (data.user.avatar_url) {
                    localStorage.setItem("avatarUrl", data.user.avatar_url);
                } else {
                    localStorage.removeItem("avatarUrl");
                }

                // üîì M·ªü kho√° gi·ªè h√†ng khi login th√†nh c√¥ng
                localStorage.removeItem("cartLocked");

                // Ki·ªÉm tra v√† th√™m s·∫£n ph·∫©m t·∫°m sau ƒëƒÉng nh·∫≠p
                const pendingItem = JSON.parse(localStorage.getItem('pendingCartItem'));
                if (pendingItem) {
                    addToCart(pendingItem.id, pendingItem.name, pendingItem.originalPrice, pendingItem.salePrice, pendingItem.discountPercent, pendingItem.image);
                    localStorage.removeItem('pendingCartItem');
                    showMessage("login-error", `ƒê√£ th√™m "${pendingItem.name}" v√†o gi·ªè h√†ng sau khi ƒëƒÉng nh·∫≠p!`, "success");
                }

                // ƒê·ªìng b·ªô gi·ªè h√†ng sau ƒëƒÉng nh·∫≠p
                await syncCartToServer();

                // ƒê√≥ng modal n·∫øu c√≥
                if (typeof CyberModal !== "undefined" && CyberModal.close) CyberModal.close();
                if (typeof updateUserDisplay === "function") {
                    updateUserDisplay();
                }

                // Notify other scripts in same tab to process pendingAction and refresh UI
                try {
                    window.dispatchEvent(new Event('user:login'));
                } catch (err) {
                    console.warn('Kh√¥ng th·ªÉ dispatch user:login event', err);
                }

                // --- Thay ƒë·ªïi so v·ªõi tr∆∞·ªõc: KH√îNG reload trang t·ª± ƒë·ªông.
                // Thay v√†o ƒë√≥: x·ª≠ l√Ω kh√¥ng reload ƒë·ªÉ c·∫≠p nh·∫≠t header, gi·ªè h√†ng, x·ª≠ l√Ω pendingAction.
                // N·∫øu c√≥ postLoginRedirect, ch·ªâ redirect n·∫øu l√† host kh√°c (external). N·∫øu c√πng origin, ch·ªâ c·∫≠p nh·∫≠t history (n·∫øu mu·ªën) nh∆∞ng KH√îNG reload.
                const postLoginRedirect = localStorage.getItem('postLoginRedirect');
                if (postLoginRedirect) {
                    localStorage.removeItem('postLoginRedirect');
                    try {
                        const redirectUrl = new URL(postLoginRedirect, window.location.origin);
                        const currentOrigin = window.location.origin;
                        if (redirectUrl.origin !== currentOrigin) {
                            // N·∫øu redirect ra domain kh√°c, chuy·ªÉn h∆∞·ªõng th·ª±c s·ª±
                            window.location.href = postLoginRedirect;
                            return;
                        } else {
                            // N·ªôi b·ªô c√πng origin => c·∫≠p nh·∫≠t UI/URL kh√¥ng reload
                            // Thay ƒë·ªïi URL nh·∫π nh√†ng n·∫øu c·∫ßn (kh√¥ng reload)
                            // V√≠ d·ª•: n·∫øu redirectUrl tr·ªè t·ªõi 1 product page ch·ª©a params, ta c·∫≠p nh·∫≠t history ƒë·ªÉ "kh·ªõp" URL.
                            // Nh∆∞ng ƒë·ªÉ an to√†n cho SPA, ch·ªâ replaceState khi path/search kh√°c hi·ªán t·∫°i.
                            const newPath = redirectUrl.pathname + redirectUrl.search + redirectUrl.hash;
                            const currentPath = window.location.pathname + window.location.search + window.location.hash;
                            if (newPath !== currentPath) {
                                try {
                                    window.history.replaceState({}, document.title, newPath);
                                } catch (e) { /* ignore */ }
                            }
                            // ƒê·∫£m b·∫£o ƒë√£ c·∫≠p nh·∫≠t header & x·ª≠ l√Ω pending action
                            await processAfterLoginNoReload();
                            return;
                        }
                    } catch (err) {
                        // N·∫øu parsing URL l·ªói, kh√¥ng redirect, ch·ªâ x·ª≠ l√Ω sau login
                        console.warn('postLoginRedirect parsing error:', err);
                        await processAfterLoginNoReload();
                        return;
                    }
                }

                // N·∫øu kh√¥ng c√≥ redirect, ch·ªâ ch·∫°y x·ª≠ l√Ω after-login ƒë·ªÉ c·∫≠p nh·∫≠t UI
                await processAfterLoginNoReload();

            } else {
                showMessage("login-error", data.error || "‚ùå Sai email ho·∫∑c m·∫≠t kh·∫©u!");
            }
        } catch (err) {
            console.error(err);
            showMessage("login-error", "‚ùå L·ªói k·∫øt n·ªëi server!");
        }
    });
}

// ==================== QU√äN M·∫¨T KH·∫®U ====================
const forgotForm = document.getElementById("forgotForm");
if (forgotForm) {
    forgotForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const email = document.getElementById("forgot-email").value.trim();

        showMessage("forgot-error", "");

        try {
            const res = await fetch(`${window.API_BASE}/api/forgot-password`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email })
            });
            const data = await res.json();

            if (data.success) {
                showMessage("forgot-error", "‚úÖ Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!", "success");
            } else {
                showMessage("forgot-error", data.error || "‚ùå Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu!");
            }
        } catch (err) {
            console.error(err);
            showMessage("forgot-error", "‚ùå L·ªói k·∫øt n·ªëi server!");
        }
    });
}

/* =======================================================================
   GOOGLE LOGIN
   ======================================================================= */
document.addEventListener("click", (e) => {
    const btn = e.target.closest("#googleLoginBtn-login, #googleLoginBtn-register, #googleLoginBtn-forgot, .google-btn");
    if (!btn) return;
    if (btn.disabled) return;

    try {
        // L∆∞u trang hi·ªán t·∫°i ƒë·ªÉ redirect v·ªÅ sau OAuth (n·∫øu c√≥)
        try { localStorage.setItem('postLoginRedirect', window.location.href); } catch (err) { /* ignore */ }

        window.location.href = `${window.API_BASE}/api/auth/google`;
    } catch (err) {
        console.error("Kh√¥ng th·ªÉ chuy·ªÉn sang Google OAuth:", err);
        showMessage("login-error", "‚ùå Kh√¥ng th·ªÉ m·ªü Google Login, vui l√≤ng th·ª≠ l·∫°i!");
    }
});

(function handleGoogleCallbackAndAutoOpen() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const loginStatus = urlParams.get("login");

        if (loginStatus === "google") {
            // üîì M·ªü kho√° gi·ªè h√†ng
            localStorage.removeItem("cartLocked");

            // L·∫•y th√¥ng tin v√† ƒë·ªìng b·ªô
            // Th·ª±c hi·ªán x·ª≠ l√Ω kh√¥ng reload: checkLoginStatus + sync + update header + process pending
            processAfterLoginNoReload().then(() => {
                // ƒê√≥ng modal v√† redirect n·∫øu c·∫ßn
                if (typeof CyberModal !== "undefined" && CyberModal.close) CyberModal.close();

                const postLoginRedirect = localStorage.getItem('postLoginRedirect');
                if (postLoginRedirect) {
                    localStorage.removeItem('postLoginRedirect');
                    try {
                        const redirectUrl = new URL(postLoginRedirect, window.location.origin);
                        if (redirectUrl.origin !== window.location.origin) {
                            // external -> full redirect
                            window.location.href = postLoginRedirect;
                            return;
                        } else {
                            // same-origin -> update URL without reload
                            const newPath = redirectUrl.pathname + redirectUrl.search + redirectUrl.hash;
                            const currentPath = window.location.pathname + window.location.search + window.location.hash;
                            if (newPath !== currentPath) {
                                try { window.history.replaceState({}, document.title, newPath); } catch (e) {}
                            }
                            return;
                        }
                    } catch (e) {
                        // parsing error -> do nothing
                    }
                }
                // N·∫øu kh√¥ng c√≥ redirect th√¨ ƒë√£ c·∫≠p nh·∫≠t UI trong processAfterLoginNoReload
            }).catch(err => {
                console.warn('Sync cart failed after Google OAuth:', err);
                if (typeof CyberModal !== "undefined" && CyberModal.close) CyberModal.close();
                try { window.dispatchEvent(new Event('user:login')); } catch (e) {}
            });

            // X√≥a query param login kh·ªèi URL ƒë·ªÉ tr√°nh x·ª≠ l√Ω l·∫°i khi reload/nh·∫•n F5
            window.history.replaceState({}, document.title, window.location.pathname);
        } else if (loginStatus === "failed") {
            showMessage("login-error", "‚ùå Google login th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
            window.history.replaceState({}, document.title, window.location.pathname);
        }

        // Always update check login on load
        checkLoginStatus();

        if (localStorage.getItem("showLoginAfterReset") === "true") {
            localStorage.removeItem("showLoginAfterReset");
            const openLoginModal = () => {
                if (typeof CyberModal !== "undefined" && typeof CyberModal.open === "function") {
                    CyberModal.open();
                } else {
                    setTimeout(openLoginModal, 200);
                }
            };
            openLoginModal();
        }
    } catch (err) {
        console.error("L·ªói x·ª≠ l√Ω callback Google/auto open:", err);
    }
})();

/* ========================================================================
   FACEBOOK LOGIN
   ======================================================================= */
document.addEventListener("click", (e) => {
    const btn = e.target.closest("#facebookLoginBtn-login, #facebookLoginBtn-register, #facebookLoginBtn-forgot, .facebook-btn");
    if (!btn) return;
    if (btn.disabled) return;

    try {
        // L∆∞u trang hi·ªán t·∫°i ƒë·ªÉ redirect v·ªÅ sau OAuth (n·∫øu c√≥)
        try { localStorage.setItem('postLoginRedirect', window.location.href); } catch (err) { /* ignore */ }

        window.location.href = `${window.API_BASE}/api/auth/facebook`;
    } catch (err) {
        console.error("Kh√¥ng th·ªÉ chuy·ªÉn sang Facebook OAuth:", err);
        showMessage("login-error", "‚ùå Kh√¥ng th·ªÉ m·ªü Facebook Login, vui l√≤ng th·ª≠ l·∫°i!");
    }
});

(function handleFacebookCallback() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const loginStatus = urlParams.get("login");

        if (loginStatus === "facebook") {
            // üîì M·ªü kho√° gi·ªè h√†ng
            localStorage.removeItem("cartLocked");

            // Th·ª±c hi·ªán x·ª≠ l√Ω kh√¥ng reload
            processAfterLoginNoReload().then(() => {
                if (typeof CyberModal !== "undefined" && CyberModal.close) CyberModal.close();

                const postLoginRedirect = localStorage.getItem('postLoginRedirect');
                if (postLoginRedirect) {
                    localStorage.removeItem('postLoginRedirect');
                    try {
                        const redirectUrl = new URL(postLoginRedirect, window.location.origin);
                        if (redirectUrl.origin !== window.location.origin) {
                            window.location.href = postLoginRedirect;
                            return;
                        } else {
                            const newPath = redirectUrl.pathname + redirectUrl.search + redirectUrl.hash;
                            const currentPath = window.location.pathname + window.location.search + window.location.hash;
                            if (newPath !== currentPath) {
                                try { window.history.replaceState({}, document.title, newPath); } catch (e) {}
                            }
                            return;
                        }
                    } catch (e) {
                        // parsing error -> do nothing
                    }
                }
            }).catch(err => {
                console.warn('Sync cart failed after Facebook OAuth:', err);
                if (typeof CyberModal !== "undefined" && CyberModal.close) CyberModal.close();
                try { window.dispatchEvent(new Event('user:login')); } catch (e) {}
            });

            window.history.replaceState({}, document.title, window.location.pathname);
        } else if (loginStatus === "failed") {
            showMessage("login-error", "‚ùå Facebook login th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
            window.history.replaceState({}, document.title, window.location.pathname);
        }
    } catch (err) {
        console.error("L·ªói x·ª≠ l√Ω callback Facebook:", err);
    }
})();